// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/user_token_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dalmazox/accountifier/internal/models"
	repositories "github.com/dalmazox/accountifier/internal/repositories"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserTokenRepository is a mock of IUserTokenRepository interface.
type MockIUserTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserTokenRepositoryMockRecorder
}

// MockIUserTokenRepositoryMockRecorder is the mock recorder for MockIUserTokenRepository.
type MockIUserTokenRepositoryMockRecorder struct {
	mock *MockIUserTokenRepository
}

// NewMockIUserTokenRepository creates a new mock instance.
func NewMockIUserTokenRepository(ctrl *gomock.Controller) *MockIUserTokenRepository {
	mock := &MockIUserTokenRepository{ctrl: ctrl}
	mock.recorder = &MockIUserTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserTokenRepository) EXPECT() *MockIUserTokenRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockIUserTokenRepository) BeginTx() (repositories.ITx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(repositories.ITx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockIUserTokenRepositoryMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockIUserTokenRepository)(nil).BeginTx))
}

// GetUserTokenByRefreshToken mocks base method.
func (m *MockIUserTokenRepository) GetUserTokenByRefreshToken(ctx context.Context, refreshToken string, tx repositories.ITx) (*models.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTokenByRefreshToken", ctx, refreshToken, tx)
	ret0, _ := ret[0].(*models.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTokenByRefreshToken indicates an expected call of GetUserTokenByRefreshToken.
func (mr *MockIUserTokenRepositoryMockRecorder) GetUserTokenByRefreshToken(ctx, refreshToken, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTokenByRefreshToken", reflect.TypeOf((*MockIUserTokenRepository)(nil).GetUserTokenByRefreshToken), ctx, refreshToken, tx)
}

// UpsertToken mocks base method.
func (m *MockIUserTokenRepository) UpsertToken(ctx context.Context, userToken models.UserToken, tx repositories.ITx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertToken", ctx, userToken, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertToken indicates an expected call of UpsertToken.
func (mr *MockIUserTokenRepositoryMockRecorder) UpsertToken(ctx, userToken, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertToken", reflect.TypeOf((*MockIUserTokenRepository)(nil).UpsertToken), ctx, userToken, tx)
}
